// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Detects life events from transaction history and offers tailored loan options.
 *
 * - detectLifeEvent - A function that handles the life event detection process.
 * - LifeEventDetectionInput - The input type for the detectLifeEvent function.
 * - LifeEventDetectionOutput - The return type for the detectLifeEvent function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const LifeEventDetectionInputSchema = z.object({
  transactionHistory: z
    .string()
    .describe('The transaction history of the user as a JSON string.'),
  userId: z.string().describe('The ID of the user.'),
});
export type LifeEventDetectionInput = z.infer<typeof LifeEventDetectionInputSchema>;

const LoanOfferSchema = z.object({
  bank: z.string().describe('The name of the bank offering the loan.'),
  eventType: z.string().describe('The type of life event the loan is tailored for.'),
  offerDetails: z.string().describe('Details of the loan offer, including interest rates and terms.'),
});

const LifeEventDetectionOutputSchema = z.object({
  lifeEvent: z
    .string()
    .describe('The detected life event, if any (e.g., Moving, New Car, Wedding). If no event is detected, return null.'),
  loanOffers: z.array(LoanOfferSchema).describe('Tailored loan offers based on the detected life event.'),
});
export type LifeEventDetectionOutput = z.infer<typeof LifeEventDetectionOutputSchema>;

export async function detectLifeEvent(input: LifeEventDetectionInput): Promise<LifeEventDetectionOutput> {
  return detectLifeEventFlow(input);
}

const detectLifeEventPrompt = ai.definePrompt({
  name: 'detectLifeEventPrompt',
  input: {schema: LifeEventDetectionInputSchema},
  output: {schema: LifeEventDetectionOutputSchema},
  prompt: `You are an AI agent that analyzes a user's transaction history to detect potential life events and suggest relevant loan offers.

  Analyze the following transaction history for user ID {{{userId}}} and detect any life events:

  Transaction History:
  {{transactionHistory}}

  Based on the transaction history, detect any potential life events. Possible life events include:
  - Moving to a new location
  - Purchasing a new car
  - Planning a wedding
  - Having a baby
  - Starting a new job

  If a life event is detected, identify relevant loan offers that would be helpful to the user. The banks available are Fibabanka, Abank, and Bbank.

  Return a JSON object with the detected life event (or null if none is detected) and an array of tailored loan offers.
  Ensure the JSON is parsable.
  `,
});

const detectLifeEventFlow = ai.defineFlow(
  {
    name: 'detectLifeEventFlow',
    inputSchema: LifeEventDetectionInputSchema,
    outputSchema: LifeEventDetectionOutputSchema,
  },
  async input => {
    try {
      const {output} = await detectLifeEventPrompt(input);
      return output!;
    } catch (error) {
      console.error('Error in detectLifeEventFlow:', error);
      throw error;
    }
  }
);
